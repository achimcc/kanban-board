{"version":3,"sources":["common.ts","store/tasks/tasksReducer.ts","store/ui/uiReducer.ts","store/store.ts","components/taskList/Task.tsx","store/actionCreators.ts","components/taskList/TaskList.tsx","store/selectors.ts","components/kanbanBoard/KanbanBoard.tsx","components/submitTask/SubmitTask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskStatus","TaskActions","initialState","tasks","byIds","1","title","2","3","allIds","tasksReducer","state","action","produce","draft","type","Create","payload","taskTitle","id","push","Delete","taskId","filter","taskStatus","ToDo","Doing","Done","uiReducer","SetStatus","status","Object","values","forEach","store","createStore","combineReducers","data","ui","Direction","moveTask","task","direction","statusArr","statusIndex","indexOf","Left","updateTask","Task","dispatch","useDispatch","ListItem","ListItemIcon","Button","onClick","SkipPrevious","ListItemText","primary","Right","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","TaskList","classes","useSelector","map","taskSelector","Paper","className","Typography","variant","align","List","component","aria-label","KanbanBoard","Container","Grid","container","spacing","item","xs","grid","SubmitTask","React","useState","taskName","setTaskName","Box","m","alignItems","justifyContent","TextField","label","value","onChange","event","currentTarget","justify","p","color","Math","random","addTask","App","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1513fc8.chunk.js","sourcesContent":["enum TaskStatus {\n    ToDo = \"TO DO\",\n    Doing = \"DOING\",\n    Done = \"DONE\"\n}\n\nenum TaskActions {\n    Create = \"CREATE\",\n    SetStatus = \"SET_STATUS\",\n    Delete = \"DELETE\"\n}\n\nexport {TaskStatus, TaskActions}","import { TaskActions } from \"../../common\";\nimport { produce } from \"immer\";\n\nconst initialState: TasksState = {\n  tasks: {\n    byIds: {\n      1: {\n        title: \"item 1\",\n      },\n      2: {\n        title: \"item 2\",\n      },\n      3: {\n        title: \"item 3\",\n      },\n    },\n    allIds: [1, 2, 3],\n  },\n};\n\nconst tasksReducer = (\n  state: TasksState = initialState,\n  action: TaskAction\n): TasksState =>\n  produce(state, (draft: TasksState) => {\n    switch (action.type) {\n      case TaskActions.Create: {\n        const { taskTitle, id } = action.payload;\n        draft.tasks.byIds[id] = { id, title: taskTitle };\n        draft.tasks.allIds.push(id);\n        break;\n      }\n      case TaskActions.Delete:\n        const { taskId } = action.payload;\n        delete draft.tasks.byIds[taskId];\n        draft.tasks.allIds = draft.tasks.allIds.filter((id) => id !== taskId);\n        break;\n    }\n  });\n\nexport default tasksReducer;\n","import { TaskStatus, TaskActions } from \"../../common\";\nimport { produce } from \"immer\";\n\nconst initialState: UIState = {\n  taskStatus: {\n    [TaskStatus.ToDo]: [1],\n    [TaskStatus.Doing]: [2],\n    [TaskStatus.Done]: [3],\n  },\n};\n\nconst uiReducer = (\n  state: UIState = initialState,\n  action: TaskAction\n): UIState =>\n  produce(state, (draft: UIState) => {\n    switch (action.type) {\n      case TaskActions.Create: {\n        const { id } = action.payload;\n        draft.taskStatus[TaskStatus.ToDo].push(id);\n        break;\n      }\n      case TaskActions.SetStatus: {\n        const { status: taskStatus, taskId } = action.payload;\n        Object.values(TaskStatus).forEach((status) => {\n          if (taskStatus === status) draft.taskStatus[status].push(taskId);\n          else\n            draft.taskStatus[status] = draft.taskStatus[status].filter(\n              (id: number) => id !== taskId\n            );\n        });\n        break;\n      }\n      case TaskActions.Delete: {\n        const { taskId } = action.payload;\n        Object.values(TaskStatus).forEach(\n          (status) =>\n            (draft.taskStatus[status] = draft.taskStatus[status].filter(\n              (id: number) => id !== taskId\n            ))\n        );\n        break;\n      }\n    }\n  });\n\nexport default uiReducer;\n","import { combineReducers, createStore } from \"redux\";\nimport tasksReducer from \"./tasks/tasksReducer\";\nimport uiReducer from \"./ui/uiReducer\";\n\nconst store = createStore<IRootState, any, any, any>(\n  combineReducers({\n    data: tasksReducer,\n    ui: uiReducer,\n  })\n);\n\nexport default store;\n","import * as React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { updateTask, removeTask } from \"../../store/actionCreators\";\nimport { TaskStatus } from \"../../common\";\n\nimport {\n  Button,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { SkipPrevious } from \"@material-ui/icons\";\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\ninterface Props {\n  task: ITask;\n}\n\nenum Direction {\n  Left,\n  Right,\n}\n\nconst moveTask = (task: ITask, direction: Direction) => {\n  const statusArr = Object.values(TaskStatus);\n  const statusIndex =\n    statusArr.indexOf(task.status) + (direction === Direction.Left ? -1 : 1);\n  const status =\n    statusIndex > -1 && statusIndex < 3 ? statusArr[statusIndex] : task.status;\n  return updateTask(task.id, status);\n};\n\nconst Task = ({ task }: Props) => {\n  const dispatch = useDispatch();\n  return (\n    <ListItem>\n      <ListItemIcon>\n        {task.status !== TaskStatus.ToDo && (\n          <Button onClick={() => dispatch(moveTask(task, Direction.Left))}>\n            <SkipPrevious />\n          </Button>\n        )}\n      </ListItemIcon>\n      <ListItemText primary={task.title} />\n      <ListItemIcon>\n        {task.status === TaskStatus.Done ? (\n          <Button onClick={() => dispatch(removeTask(task.id))}>\n            <CloseIcon />\n          </Button>\n        ) : (\n          <Button onClick={() => dispatch(moveTask(task, Direction.Right))}>\n            <SkipNextIcon />\n          </Button>\n        )}\n      </ListItemIcon>\n    </ListItem>\n  );\n};\n\nexport default Task;\n","import {TaskActions, TaskStatus} from \"../common\"\n\nexport function addTask(taskTitle: string):TaskAction {\n  const id = Math.random();\n  const action = {\n    type: TaskActions.Create,\n    payload: {taskTitle, id}\n  }\n  return action\n}\n\nexport function updateTask(taskId: Number, status: TaskStatus):TaskAction {\n  const action: TaskAction = {\n    type: TaskActions.SetStatus,\n    payload: {status, taskId}\n  }\n  return action\n}\n\nexport function removeTask(taskId: Number):TaskAction {\n  const action: TaskAction = {\n    type: TaskActions.Delete,\n    payload: {taskId}\n  }\n  return action\n}\n\n","import * as React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useSelector } from \"react-redux\";\nimport Task from \"./Task\";\nimport { TaskStatus } from \"../../common\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { taskSelector } from \"../../store/selectors\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\ninterface Props {\n  status: TaskStatus;\n  title: string;\n}\n\nconst TaskList = ({ status, title }: Props) => {\n  const classes = useStyles();\n  const tasks = useSelector((store: IRootState) => taskSelector(store, status));\n  return (\n    <Paper>\n      <div className={classes.root}>\n        <Typography variant=\"h6\" align=\"center\">\n          {title}\n        </Typography>\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\n          {tasks.map((task: ITask) => (\n            <Task task={task} key={task.id} />\n          ))}\n        </List>\n      </div>\n    </Paper>\n  );\n};\n\nexport default TaskList;\n","import { TaskStatus } from \"../common\";\n\nconst taskSelector = (store: IRootState, status: TaskStatus) =>\n  store.ui.taskStatus[status].map((id: number) => ({\n    id,\n    status: status,\n    ...store.data.tasks.byIds[id],\n  }));\nexport { taskSelector };\n","import * as React from \"react\";\nimport TaskList from \"../taskList/TaskList\";\nimport { TaskStatus } from \"../../common\";\nimport { Container, Grid } from \"@material-ui/core\";\n\nconst KanbanBoard = () => {\n  const grid = (status: TaskStatus) => {\n    return (\n      <Grid item xs={4} key={status}>\n        <TaskList status={status} key={status} title={status} />\n      </Grid>\n    );\n  };\n  return (\n    <Container>\n      <Grid container spacing={1}>\n        {Object.values(TaskStatus).map((status) => grid(status))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default KanbanBoard;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { TextField, Button, Grid, Box } from \"@material-ui/core\";\nimport { addTask } from \"../../store/actionCreators\";\n\nexport default function SubmitTask() {\n  const dispatch = useDispatch();\n  const [taskName, setTaskName] = React.useState(\"\");\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTaskName(event.currentTarget.value);\n  };\n  const handleClick = () => {\n    const action = addTask(taskName);\n    dispatch(action);\n    setTaskName(\"\");\n  };\n\n  return (\n    <Box m=\"auto\" alignItems=\"center\" justifyContent=\"center\">\n      <Grid container spacing={1}>\n        <Grid item xs={6}>\n          <TextField\n            id=\"standard-name\"\n            label=\"Task Name\"\n            value={taskName}\n            onChange={handleChange}\n          />\n        </Grid>\n        <Grid item container xs={6} alignItems=\"center\" justify=\"center\">\n          <Box p={2}>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n              Submit Task\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport KanbanBoard from \"./components/kanbanBoard/KanbanBoard\";\nimport SubmitTask from \"./components/submitTask/SubmitTask\";\nimport { Box, Typography } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Typography variant=\"h4\" align=\"center\">\n          Kanban Board App\n        </Typography>\n        <Box display=\"flex\">\n          <SubmitTask />\n        </Box>\n        <KanbanBoard />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}